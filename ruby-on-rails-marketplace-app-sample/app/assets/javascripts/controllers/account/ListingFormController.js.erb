angular.module('market')

	.controller('market.account.listings.ListingFormController', function ($scope, Restangular, SessionService, Upload, $timeout, $http, ScrollTo, $sce) {

		$scope.photosUploading = 0;
		$scope.submittingForm = false;
		$scope.step = 4;

		// ====================================================
		// AUTHENTICATION HANDLERS
		// ====================================================

		$scope.user = {
			validateEmail: function () {
				console.log($scope.user.email);
			},
			authenticate: function (event) {
				// Trigger next step validation procedure.
				$scope.nextStep(event, 4);
				if ($scope.stepValid(3)) {
					$scope.processing = true;
					if ($scope.user.isLogin) {
						console.log("Logging in...")
						$http.post('/login', {format: 'json', user:$scope.user}).then(function(response){
							console.log("LOG IN RESPONSE SUCCESS:", response);
							$scope.submit(event);
						},function(error){
							$scope.processing = false;
							$scope.errors = [
								{ key: "password",
									message: "The email or password combination you entered is incorrect!"
								}
							];
							console.log("LOG IN RESPONSE FAILER:", error);
						});
					} else {
						console.log("Signing up...")
						$http.post('/', {format: 'json', user:$scope.user}).then(function(response){
							console.log("SIGN UP RESPONSE SUCCESS:", response);
							$scope.submit(event);
						},function(error){
							$scope.processing = false;
							$scope.errors = [];
							if (error.data.errors.username == "has already been taken")
								$scope.errors.push({ key: "username", message: "That email is already associated with a different account." });
							console.log("SIGN UP RESPONSE FAILER:", error);
						});
					}
				} else {
					$scope.processing = false;
				}
			}
		};

		// ====================================================
		// VALIDATION HELPERS
		// ====================================================

		// Validates the requested step.
		$scope.stepValid = function (step) {
			if (step == 2) return true; //$scope.listing.photos.length;
			return (!$('.step-' + step + ' .ng-pristine.ng-invalid').length && !$('.step-'+step+' .invalid').length);
		};

		// Controls the next step button request.
		$scope.nextStep = function (event, nextStep) {
			$scope.saveDraft();
			event.preventDefault();
			$scope.validate = true;
			if (!$scope.stepValid($scope.step)) {
				$timeout(function(){ScrollTo.id(".step-" + $scope.step + " .invalid", 20)},30);
				return;
			}
			$scope.validate = false;
			if (nextStep < 4) {
				ScrollTo.id("#steps",0);
				$scope.step = nextStep;
			}
		};

		// ====================================================
		// FORM SUBMIT HANDLER
		// ====================================================

		// upload later on form submit or something similar
		$scope.submit = function(event) {
			if (!$scope.stepValid($scope.step)) {
				console.log("Invalid step:", $scope.step)
				$scope.validate = true;
				event.preventDefault();
				return false;
			}

			console.log('valid current',$scope.stepValid($scope.step))
			// Go to next step if enter pressed and current step is valid.
			if ($scope.stepValid($scope.step) && event && event.keyCode == 13 && $scope.step < 3) {
				console.log('current_step', $scope.step);
				// $scope.nextStep(event, $scope.step + 1);
			}

			$scope.submittingForm = true;
			document.getElementById("listingForm").submit();
			console.log(event, $scope.submittingForm);
			// return true;
		};

		$scope.saveDraft = function () {
			// Set the current users email if needed.
			$scope.listingDraft = $scope.listing
			if ($scope.listingDraft && $scope.user && $scope.user.email) $scope.listingDraft.email = $scope.user.email;

			// Save the listing draft.
			$http.post('/listing_drafts', {format: 'json', listing:$scope.listingDraft}).then(function(response){
				console.log("LOG IN RESPONSE SUCCESS:", response);
			},function(error){
				console.log("LOG IN RESPONSE FAILER:", error);
			});
		}

		$scope.$watch('listing', function (){$scope.saveDraft()});

		// ====================================================
		// PHOTO UPLOADER HELPERS
		// ====================================================

		$scope.deletePhoto = function (photo) {
			var index = $scope.listing.photos.indexOf(photo);
			if (index > -1) $scope.listing.photos.splice(index, 1);
			var photo = Restangular.restangularizeElement(null, photo, 'photos');
			photo.remove();
		}

		$scope.initSortable = function () {
			$(".sortable").sortable({
				update: function (event, ui) {
					var photos = _.map($('[name="listing[photo_ids][]"]'), function (item) {
						return _.select($scope.listing.photos, function(i) { return i.id == parseInt(item.value) })[0];
					});

					console.log('PHOTOFILES',photos);
					$timeout(function(){
						$scope.listing.photos = photos;
					});
				}
			})
		}

		$scope.uploadFiles = function(files) {
			if (!$scope.listing.photos) $scope.listing.photos = [];

			_.each(files, function(file) {
				$scope.photosUploading = $scope.photosUploading + 1;

				// Creating a stub photos object file.
				var photo = Restangular.restangularizeElement(null, { file: file }, 'photos');

				// Save photo to retrieve aws upload keys.
				photo.save().then(function(response){
					var element = photo;

					angular.merge(element, response);

					$timeout(function(){
						element.showLoader = true;
					}, 1000);

					Upload.upload({
						url: "https://<%= ENV['AWS_S3_BUCKET'] %>.s3.amazonaws.com/", //S3 upload url including bucket name
						method: 'POST',
						data: {
							"key": element.buckets.original["key"],
							"success_action_status": element.buckets.original["success_action_status"],
							"acl": element.buckets.original["acl"],
							"policy": element.buckets.original["policy"],
							"x-amz-credential": element.buckets.original["x-amz-credential"],
							"x-amz-algorithm": element.buckets.original["x-amz-algorithm"],
							"x-amz-date": element.buckets.original["x-amz-date"],
							"x-amz-signature": element.buckets.original["x-amz-signature"],
							file: file
						}
					}).then(function (success) {
						element.uploaded = true;
						element.progressPercentage = 100.0;
						$scope.photosUploading = $scope.photosUploading - 1;
						element.save();
					}, function (error) {
						console.log('Error status: ' + error.status);
					}, function (event) {
						element.progressPercentage = parseInt(100.0 * event.loaded / event.total);
						console.log(element.progressPercentage);
					});
				});

				console.log('Photo Files:', $scope.listing.photos);
				$scope.listing.photos.push(photo);
			});
		}


		// ====================================================
		// LISTING MODELS OBJECT
		// ====================================================

		$scope.listing = {
			get title() {
				return ($scope.listing.category ? $scope.listing.category.name : 'Item' ) + " For Sale"
			},

			_category: {id:null},
			get category() {
				return $scope.SessionService.categoryById($scope.listing._category.id) || {};
			},
			set category(val) {
				$scope.listing._category = val;
				if (!val || !val.id) return;
				$scope.listing._category = $scope.SessionService.categoryById($scope.listing._category.id);
				console.log('$sc',$scope.listing._category,val)
				if ($scope.listing._category.category) {
					$scope.parentCategory = $scope.listing._category.category
					$scope.childCategory = $scope.listing._category
				} else {
					$scope.parentCategory = $scope.listing._category
				}
			},

			get valid() {
				return $scope.listing.completionPercentage == 100;
			},
		};

		// ====================================================
		// MAP INITIALIZATION
		// ====================================================

		$scope.loadMap = function(center) {
			if (google) {
				$scope.map = new google.maps.Map(document.getElementById('product-location'), {
					zoom: 10,
					center: center
				});

				$scope.geocodeAddress();
			}
		}

		// ====================================================
		// GEOCODER HELPER
		// ====================================================

		$scope.geocodeAddress = function() {
			if ($scope.listing.address && $scope.listing.address.formatted_address && $scope.listing.address.formatted_address.length > 5) {
				var geocoder = new google.maps.Geocoder();
				geocoder.geocode({'address': $scope.listing.address.formatted_address}, function(results, status) {
					if (status === 'OK') {
						$scope.map.setZoom(12);
						$scope.map.setCenter(results[0].geometry.location);
						if (!$scope.marker) {
							$scope.marker = new google.maps.Marker({
								map: $scope.map,
								position: results[0].geometry.location,
								icon: '<%= asset_url("marker") %>'
							});
						} else {
							$scope.marker.setPosition(results[0].geometry.location);
						}
					} else {
						console.error('Geocode was not successful for the following reason: ' + status);
					}
				});
			}
		}
	});
